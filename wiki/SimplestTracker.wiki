#summary The simplest possible Tracker.

== Introduction ==

In the past, we had people complaining about the size of a library of *30KB* (which is completely ridiculous IMHO), and so to prevent such complains or to give you an overview of the minimun needed to send data to Google Analytcis servers, we will describe a step by step here.


== The Measurement Protocol ==

As you can see in the [https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide Measurement Protocol Developer Guide], to send data to Google Analytcis servers you need 3 things

  # a client ID
  # well formated payload data
  # an HTTP POST or GET



== The Client ID ==

As explained in [https://developers.google.com/analytics/devguides/collection/protocol/v1/reference#required Required Values For All Hits], you need 4 required values each time you send a request, all the rest is optional, but if one of those 4 is missing your request will fail.

The *protocol version* is a piece of cake, just use `v=1`.

The *Tracking ID* is quite easy too, you get it from the Google Analytics panel, something following this format `UA-XXXX-Y`.

The *Hit Type* is one of the following strings: `pageview`, `screenview`, `event`, etc.<br>
(documented here [https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#t Hit Type]).

So, the real hard parameter to manage is the *Client ID*<br>
(again documented here [https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#cid Client ID]).

The problem is not really to generate that client ID but to save it and reuse it.

If for example you generate a new Client ID for each requests,<br>
the Google Analytics servers will see a different user for each request,<br>
something you really don't want.

Another example would be tracking the same user from 2 different environments:<br>
on a web page the user would be tracked by `analytics.js`<br>
and within that page a SWF file using `analytics.swc` would track also that user.

In that case, if you use 2 different Client ID, you can not follow the flow of the user browsing.

At the opposite, if you re-use the same Client ID, you can see where and when the used navigate insde the SWF etc.


TODO
{{{
//code to generate the UUID
}}}

TODO
{{{
//code save/load the UUID from a shared object
}}}


== Well Formated Payload Data ==

It is all about following the rules of the [https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters Measurement Protocol Parameter Reference] but most importantly how to encode them correctly.

It is described here [https://developers.google.com/analytics/devguides/collection/protocol/v1/reference#encoding URL Encoding Values] with the following
----
All values sent to Google Analytics must be both UTF-8 and [http://en.wikipedia.org/wiki/Percent-encoding URL Encoded]. To send the key `dp` with the value `/my page â‚¬`, you will first need to make sure this is UTF-8 encoded, then url encoded, resulting in the final string:
{{{
dp=%2Fmy%20page%20%E2%82%AC
}}}
If any of the characters are encoded incorrectly, they will be replaced with the unicode replacement character `xFFFD`.
----

And then come ECMAScript history and ActionScript 3.0 ...

In AS3 you have basically 3 different way to URL Encode stuff
  * the [http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/package.html#escape() escape()] function<br>Converts the parameter to a string and encodes it in a URL-encoded format, where most nonalphanumeric characters are replaced with `%` hexadecimal sequences. 
  * the [http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/package.html#encodeURI() encodeURI()] function<br>Encodes a string into a valid URI (Uniform Resource Identifier).<br>Converts a complete URI into a string in which all characters are encoded as UTF-8 escape sequences unless a character belongs to a small group of basic characters.
  * the [http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/package.html#encodeURIComponent() encodeURIComponent()] function<br>Encodes a string into a valid URI component.<br>Converts a substring of a URI into a string in which all characters are encoded as UTF-8 escape sequences unless a character belongs to a very small group of basic characters.

and the nuance between them is subtle ...